<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
    
    <!-- Import Alfresco base configuration -->
	<!-- import resource="classpath:alfresco/application-context.xml" / -->
	
    <!-- define custom scope bean for thread scope -->
	<bean class="org.springframework.beans.factory.config.CustomScopeConfigurer">
		<property name="scopes">
		<map>
			<entry key="thread">
				<bean class="com.legacytojava.jbatch.common.SpringThreadScope"/>
			</entry>
		</map>
		</property>
	</bean>

	<!-- define transaction manager for CloudScape (Derby) database -->
	<bean id="csTransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="csDataSource"/>
	</bean>
	
	<!-- define data source for CloudScape (Derby) database -->
	<bean id="csDataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="org.apache.derby.jdbc.EmbeddedDriver" />
		<property name="url" value="jdbc:derby:dbcache;create=true" />
		<property name="username" value="" />
		<property name="password" value="" />
	</bean>
	
	<!-- Transaction Advice -->
	<tx:advice id="jmsTxAdvice" transaction-manager="jmsTransactionManager">
		<!-- the transactional semantics... -->
		<tx:attributes>
			<!-- all methods use the default transaction settings (see below) -->
			<tx:method name="process"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut id="mailProcessorOperation"
			expression="execution(* com.legacytojava.jbatch.Processor.*(..))"/>
		<aop:advisor advice-ref="jmsTxAdvice" pointcut-ref="mailProcessorOperation"/>
	</aop:config>
	<!-- end of Advice -->
	
	<bean id="resource" class="com.legacytojava.jbatch.Resource">
		<property name="dataSource" ref="csDataSource"/>
	</bean>
	
	<bean id="metricsData" scope="thread"
		class="com.legacytojava.jbatch.MetricsData">
	</bean>
	
	<bean id="metricsLogger" scope="thread"
		class="com.legacytojava.jbatch.MetricsLogger">
		<constructor-arg index="0" ref="csDataSource"/>
		<constructor-arg index="1" ref="metricsData"/>
	</bean>
	
	<bean id="appProperties" class="java.util.HashMap">
	    <constructor-arg index="0">
	    	<props>
	    	<prop key="app_name">jbatch</prop>
	    	<prop key="app_xmldocs">./xmldocs/</prop>
	    	<prop key="notify">no</prop>
	    	<prop key="shutdown_delay">5</prop>
	    	<prop key="silent_shutdown">yes</prop>
	    	<prop key="retry_alert">fatal</prop>
	    	<prop key="request_gc">no</prop>
	    	</props>
	    </constructor-arg>
	</bean>

	<!-- this is the message listener container -->
	<bean id="jmsListenerContainer" lazy-init="true"
	  class="org.springframework.jms.listener.DefaultMessageListenerContainer">
	  <property name="concurrentConsumers" value="5"/>
	  <property name="connectionFactory" ref="jmsConnectionFactory" />
	  <property name="destination" ref="ruleEngineInput" />
	  <property name="messageListener" ref="jmsListener" />
	  <property name="sessionTransacted" value="true" />
	  <property name="transactionManager" ref="jmsTransactionManager" />
	  <property name="autoStartup" value="false"/>
	</bean>
	
	<!-- this is the Message Driven POJO (MDP) -->
	<bean id="jmsListener" lazy-init="true"
		class="com.legacytojava.jbatch.queue.JmsListener">
		<property name="jmsProcessor" ref="jmsProcessor"/>
	</bean>

	<!-- this is the message listener container -->
	<bean id="queueListenerContainer" lazy-init="true"
	  class="org.springframework.jms.listener.DefaultMessageListenerContainer">
	  <property name="concurrentConsumers" value="4"/>
	  <property name="connectionFactory" ref="jmsConnectionFactory" />
	  <property name="destination" ref="mailSenderInput" />
	  <property name="messageListener" ref="queueListener" />
	  <property name="sessionTransacted" value="true" />
	  <!-- property name="exceptionListener" ref="" / -->
	  <property name="transactionManager" ref="jmsTransactionManager" />
	  <property name="autoStartup" value="false"/>
	</bean>
	
	<!-- this is the Message Driven POJO (MDP) -->
	<bean id="queueListener" lazy-init="true"
		class="com.legacytojava.jbatch.QueueListener">
		<constructor-arg index="0" ref="queueReaderVo"/>
		<property name="jmsTemplate" ref="unHandledOutputJmsTemplate"/>
	</bean>
	
	<!-- 
	 Required properties for QueueListener (default processor is for MailSender)
	 	queue_name - a symbolic name, for display only
		threads - number of queue threads to be created, used by QueueReader only
	 	priority - thread priority: high/medium/low
	 	message_count - number of messages to read before stopping the process, 0=unlimited
	 	allow_extra_workers - yes/no
	 	delivery_count_reached - action to take when delivery count reached the threshold: stop_listener/error_queue
	 -->
	<bean id="queueReaderVo" class="com.legacytojava.message.vo.QueueReaderVo">
		<constructor-arg>
		<map>
			<entry key="queue_name" value="mailSenderInput"></entry>
			<entry key="threads" value="1"></entry>
			<entry key="priority" value="high"></entry>
			<entry key="message_count" value="0"></entry>
			<entry key="allow_extra_workers" value="yes"></entry>
			<entry key="delivery_count_reached" value="error_queue"></entry>
	    	<entry key="processor_name" value="mailSenderProcessor"></entry>
		</map>
		</constructor-arg>
	</bean>
	
	<bean id="queueReader" lazy-init="true"
		class="com.legacytojava.jbatch.QueueReader">
		<constructor-arg index="0" ref="queueReaderVo"></constructor-arg>
		<property name="transactionManager" ref="jmsTransactionManager" />
		<property name="jmsTemplate" ref="ruleEngineInputJmsTemplate"/>
	</bean>

	<bean id="queueProcessor" lazy-init="true"
		class="com.legacytojava.jbatch.TestProcessor">
		<property name="serverBaseVo" ref="queueReaderVo"></property>
	</bean>

	<!-- 
		Mailbox (MailReader) Section
	 -->
	<!-- bean id="duplicateCheck" scope="prototype"
		class="com.legacytojava.message.bo.mailreader.DuplicateCheckJdbcDao">
		<property name="dataSource" ref="csDataSource"/>
		<property name="purgeAfter" value="24"/>
	</bean -->
	
 	<bean id="extraProperties" class="java.util.HashMap">
	    <constructor-arg>
	    	<map>
	    	<entry key="extra_prop1" value="extra_value1"></entry>
	    	</map>
	    </constructor-arg>
	</bean>
	
	<bean id="mailProcessor" lazy-init="true"
		class="com.legacytojava.jbatch.TestProcessor">
		<property name="properties" ref="extraProperties"></property>
	</bean>

	<!-- 
		SMTP (MailSender) Section
	 -->
	<bean id="mailSenderProcessor" lazy-init="true" scope="thread"
	      class="com.legacytojava.message.bo.mailsender.MailSenderProcessor">
   		<property name="jmsProcessor" ref="jmsProcessor"/>
   		<property name="jmsTransactionManager" ref="jmsTransactionManager"/>
   		<property name="errorQueue" ref="unHandledOutput"/>
	</bean>
	
	<bean id="smtpProperties" class="java.util.HashMap">
	    <constructor-arg>
	    <map>
	    	<entry key="smtphost" value="localhost"/>
	    	<entry key="smtpport" value="-1"/>
	    	<entry key="default" value="localhost"/>
	    	<entry key="use_ssl" value="no"/>
	    	<entry key="userid" value="jwang"/>
	    	<entry key="password" value="jwang"/>
	    	<entry key="persistence" value="yes"/>
	    	<entry key="server_type" value="smtp"/>
	    	<entry key="threads" value="2"/>
	    	<entry key="retry" value="10"/>
	    	<entry key="freq" value="5"/>
	    	<entry key="alert_after" value="15"/>
	    	<entry key="alert_level" value="error"/>
	    	<entry key="message_count" value="0"/>
	    </map>
	    </constructor-arg>
	</bean>
	<bean id="smtpConnection" scope="prototype"
	      class="com.legacytojava.jbatch.smtp.SmtpConnection">
	    <constructor-arg index="0" ref="smtpProperties"/>
	</bean>
	<bean id="emailSender" lazy-init="true"
	      class="com.legacytojava.jbatch.common.EmailSender">
	    <constructor-arg index="0" ref="smtpProperties"/>
	</bean>
	<bean id="simpleEmailSender" lazy-init="true"
	      class="com.legacytojava.message.bean.SimpleEmailSender">
	    <constructor-arg index="0" ref="smtpProperties"/>
	</bean>
		
	<!-- 
		Timer Section. Default is to use TestProcessor.
	 -->
	<bean id="timerProcessor" lazy-init="true" scope="thread"
		class="com.legacytojava.jbatch.TimerProcessor">
	</bean>
	
	<!-- 
		Event Section 
		[CHANGEME]: Please change following to your alert email addresses.
	 -->
	<!-- Define properties for event notification -->
 	<bean id="eventProperties" class="java.util.HashMap">
	    <constructor-arg>
	    	<map>
	    	<entry key="event_cleared" value="alert@localhost,testto@localhost"></entry>
	    	<entry key="info_event" value="alert@localhost"></entry>
	    	<entry key="excep_event" value="alert@localhost"></entry>
	    	<entry key="fatal_event" value="alert@localhost"></entry>
	    	
	    	<entry key="jms_excep_event" value="alert@localhost"></entry>
	    	<entry key="sql_excep_event" value="alert@localhost"></entry>
	    	<entry key="smtp_excep_event" value="alert@localhost"></entry>
	    	<entry key="jmail_excep_event" value="alert@localhost"></entry>
	    	
	    	<entry key="jms_fatal_event" value="alert@localhost"></entry>
	    	<entry key="sql_fatal_event" value="alert@localhost"></entry>
	    	<entry key="smtp_fatal_event" value="alert@localhost"></entry>
	    	<entry key="jmail_fatal_event" value="alert@localhost"></entry>
	    	</map>
	    </constructor-arg>
	</bean>
	
	<!--
		[CHANGEME] - if you want to disable all alerts, set "disabled" property to "yes". 
	 -->
	<bean id="eventAlert" lazy-init="true" scope="prototype"
	      class="com.legacytojava.jbatch.EventAlert">
	    <constructor-arg index="0" ref="eventProperties" />
	    <property name="emailSender" ref="emailSender"/>
	    <property name="disabled" value="no"/>
	</bean>
	
</beans>